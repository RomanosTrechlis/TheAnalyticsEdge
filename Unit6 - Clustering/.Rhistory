install.packages("caTools")
install.packages("RORC")
install.packages("ROCR")
install.packages("tm")
install.packages("neuralnet")
install.packages("ggmap")
install.packages("RODBC")
install.packages("gdata")
install.packages("xlsReadWrite")
install.packages("xlsx")
install.packages("party")
?neuranet
# Unit 6 - Introduction to Clustering
setwd("C:\\Users\\Romanos\\Projects\\rworkspace\\TheAnalyticsEdge\\Unit6")
# Video 6
# After following the steps in the video, load the data into R
movies = read.table("movieLens.txt", header=FALSE, sep="|",quote="\"")
str(movies)
# Add column names
colnames(movies) = c("ID", "Title", "ReleaseDate", "VideoReleaseDate", "IMDB", "Unknown", "Action", "Adventure", "Animation", "Childrens", "Comedy", "Crime", "Documentary", "Drama", "Fantasy", "FilmNoir", "Horror", "Musical", "Mystery", "Romance", "SciFi", "Thriller", "War", "Western")
str(movies)
# Remove unnecessary variables
movies$ID = NULL
movies$ReleaseDate = NULL
movies$VideoReleaseDate = NULL
movies$IMDB = NULL
# Remove duplicates
movies = unique(movies)
str(movies)
sum(movies$Comedy)
sum(movies$Western)
nrow(subset(movies, Romance == 1 & Drama == 1))
distances = dist(movies[2:20], method = "euclidean")
clusterMovies = hclust(distances, method = "ward")
clusterMovies = hclust(distances, method = "ward.D")
plot(clusterMovies)
clusterGroups = cutree(clusterMovies, k = 10)
tapply(movies$Action, clusterGroups, mean)
str(clusterGroups)
summary(clusterGroups)
tapply(movies$Action, clusterGroups, mean)
tapply(movies$Romance, clusterGroups, mean)
subset(movies, Title=="Men in Black (1997)")
clusterGroups[257]
cluster2 = subset(movies, clusterGroups==2)
cluster2$Title[1:10]
clusterGroup2 = cutree(clusterMovies, k = 10)
subset(movies, clusterGroup2 == 1)
subset(movies, clusterGroup2 == 2)
tapply(movies$Action, clusterGroups, mean)
clusterGroup2 = cutree(clusterMovies, k = 2)
subset(movies, clusterGroup2 == 2)
healthy = read.csv("healthy.csv", header=FALSE)
healthyMatrix = as.matrix(healthy)
str(healthyMatrix)
image(healthyMatrix,axes=FALSE,col=grey(seq(0,1,length=256)))
healthyVector = as.vector(healthyMatrix)
distance = dist(healthyVector, method = "euclidean")
str(healthyVector)
k = 5
set.seed(1)
KMC = kmeans(healthyVector, centers = k, iter.max = 1000)
str(KMC)
healthyClusters = KMC$cluster
KMC$centers[2]
dim(healthyClusters) = c(nrow(healthyMatrix), ncol(healthyMatrix))
image(healthyClusters, axes = FALSE, col=rainbow(k))
install.packages("flexclust")
dailykos = read.csv("dailykos.csv")
summary(dailykos)
str(dailykos)
dailykosVector = as.vector(dailykos)
str(dailykosVector)
distance = dist(daylikos, method = "euclidean")
distance = dist(dailykos, method = "euclidean")
clusterIntensity = hclust(distance, method="ward.D")
plot(clusterMovies)
plot(clusterIntensity)
clusterGroups = cutree(clusterIntensity, k = 7)
cluster1 = subset(dailykos, clusterGroups==1)
cluster2 = subset(dailykos, clusterGroups==2)
cluster3 = subset(dailykos, clusterGroups==3)
cluster4 = subset(dailykos, clusterGroups==4)
cluster5 = subset(dailykos, clusterGroups==5)
cluster6 = subset(dailykos, clusterGroups==6)
cluster7 = subset(dailykos, clusterGroups==7)
nrow(cluster3)
nrow(cluster1)
nrow(cluster2)
nrow(cluster4)
nrow(cluster5)
nrow(cluster6)
nrow(cluster7)
tail(sort(colMeans(cluster1)))
tail(sort(colMeans(cluster2)))
tail(sort(colMeans(cluster3)))
tail(sort(colMeans(cluster4)))
tail(sort(colMeans(cluster5)))
tail(sort(colMeans(cluster6)))
tail(sort(colMeans(cluster7)))
set.seed(1000)
KMC = kmeans(dailykos, centers = 7)
str(KMC)
healthyClusters = KMC$cluster
rm(healthyClusters)
clusters = KMC$cluster
str(clusters)
cluster1 = subset(dailykos, clusters==1)
cluster2 = subset(dailykos, clusters==2)
cluster3 = subset(dailykos, clusters==3)
cluster4 = subset(dailykos, clusters==4)
cluster5 = subset(dailykos, clusters==5)
cluster6 = subset(dailykos, clusters==6)
cluster7 = subset(dailykos, clusters==7)
nrow(cluster3)
nrow(cluster1)
nrow(cluster2)
nrow(cluster4)
nrow(cluster5)
nrow(cluster6)
nrow(cluster7)
tail(sort(colMeans(cluster1)))
tail(sort(colMeans(cluster2)))
tail(sort(colMeans(cluster3)))
tail(sort(colMeans(cluster4)))
tail(sort(colMeans(cluster5)))
tail(sort(colMeans(cluster6)))
tail(sort(colMeans(cluster7)))
cluster1 = subset(dailykos, clusterGroups==1)
cluster2 = subset(dailykos, clusterGroups==2)
cluster3 = subset(dailykos, clusterGroups==3)
cluster4 = subset(dailykos, clusterGroups==4)
cluster5 = subset(dailykos, clusterGroups==5)
cluster6 = subset(dailykos, clusterGroups==6)
cluster7 = subset(dailykos, clusterGroups==7)
KMCcluster1 = subset(dailykos, clusters==1)
KMCcluster2 = subset(dailykos, clusters==2)
KMCcluster3 = subset(dailykos, clusters==3)
KMCcluster4 = subset(dailykos, clusters==4)
KMCcluster5 = subset(dailykos, clusters==5)
KMCcluster6 = subset(dailykos, clusters==6)
KMCcluster7 = subset(dailykos, clusters==7)
nrow(cluster7)
nrow(cluster3)
nrow(KMCcluster3)
table(clusterGroups, clusters)
table(clusterGroups, clusters)
table(clusterGroups, clusters)
setwd("C:\\Users\\Romanos\\Projects\\rworkspace\\TheAnalyticsEdge\\Unit6")
airlines = read.csv("AirlinesCluster.csv")
airlines = read.csv("AirlinesCluster.csv")
summary(airlines)
install.packages("tm")
library(caret)
preproc = preProcess(airlines)
airlinesNorm = predict(preproc, airlines)
summary(airlinesNorm)
sd(airlinesNorm)
distance = dist(airlinesNorm, method = "euclidean")
clusterIntensity = hclust(distance, method="ward.D")
plot(clusterIntensity)
rect.hclust(clusterIntensity, k = 7, border = "red")
rect.hclust(clusterIntensity, k = 6, border = "green")
clusterGroups = cutree(clusterIntensity, k = 5)
cluster1 = subset(airlinesNorm, clusterGroups==1)
nrow(cluster1)
tapply(airlines$Balance, clusterGroups, mean)
tapply(airlines$QualMiles, clusterGroups, mean)
tapply(airlines$BonusMiles, clusterGroups, mean)
tapply(airlines$BonusTrans, clusterGroups, mean)
tapply(airlines$FlightMiles, clusterGroups, mean)
tapply(airlines$FlightTrans, clusterGroups, mean)
tapply(airlines$DaysSinceEnroll, clusterGroups, mean)
set.seed(88)
KMC = kmeans(airlinesNorm, centers = 5, iter.max = 1000)
clusters = KMC$cluster
KMCcluster1 = subset(airlinesNorm, clusters==1)
KMCcluster2 = subset(airlinesNorm, clusters==2)
KMCcluster3 = subset(airlinesNorm, clusters==3)
KMCcluster4 = subset(airlinesNorm, clusters==4)
KMCcluster5 = subset(airlinesNorm, clusters==5)
KMCcluster6 = subset(airlinesNorm, clusters==6)
KMCcluster7 = subset(airlinesNorm, clusters==7)
nrow(KMCcluster1)
nrow(KMCcluster2)
nrow(KMCcluster3)
nrow(KMCcluster4)
nrow(KMCcluster5)
KMC$centers
stocks = read.csv("StocksCluster.csv")
str(stocks)
nrow(subset(stocks, PositiveDec > 0))
6324/11580
cor(stocks)
max(cor(stocks))
cor(stocks)
summary(stocks)
set.seed(144)
spl = sample.split(stocks$PositiveDec, SplitRatio = 0.7)
stocksTrain = subset(stocks, spl == TRUE)
stocksTest = subset(stocks, spl == FALSE)
library(caret)
spl = sample.split(stocks$PositiveDec, SplitRatio = 0.7)
library(e1071)
spl = sample.split(stocks$PositiveDec, SplitRatio = 0.7)
library(caTools)
spl = sample.split(stocks$PositiveDec, SplitRatio = 0.7)
stocksTrain = subset(stocks, spl == TRUE)
stocksTest = subset(stocks, spl == FALSE)
StocksModel = glm(PositiveDec ~ ., data=stocksTrain, family="binomial")
StocksPredict = predict(StocksModel, newdata=stocksTest, type="class")
StocksPredict = predict(StocksModel, newdata=stocksTest, type="response")
table(stocksTest, StocksPredict >= 0.5)
StocksPredict
str(StocksPredict)
table(stocksTest, StocksPredict >= 0.5)
table(stocksTest$PositiveDec, StocksPredict >= 0.5)
(417 + 1553)/(417 + 1553 + 1160 + 344)
StocksPredict = predict(StocksModel, type="response")
table(stocksTrain$PositiveDec, StocksPredict >= 0.5)
(990 + 3640)/(990 + 3640 + 2689 + 787)
StocksPredict = predict(StocksModel, newdata=stocksTest, type="response")
table(stocksTest$PositiveDec, StocksPredict >= 0.5)
table(stocksTest$PositiveDec)
1897/(1897 + 1577)
limitedTrain = stocksTrain
limitedTrain$PositiveDec = NULL
limitedTest = stocksTest
limitedTest$PositiveDec = NULL
library(caret)
preproc = preProcess(limitedTrain)
normTrain = predict(preproc, limitedTrain)
normTest = predict(preproc, limitedTest)
summary(normTrain)
summary(normTest)
set.seed(144)
KMC = kmeans(normTrain, centers = 3)
clusters = KMC$cluster
cluster1 = subset(normTrain, clusters == 1)
cluster2 = subset(normTrain, clusters == 2)
cluster3 = subset(normTrain, clusters == 3)
nrow(cluster1)
nrow(cluster2)
nrow(cluster3)
library(flexclust)
install.packages("flexclust")
library(flexclust)
install.package("flexclust")
install.packages("flexclust")
ap <- available.packages()
ap
View(ap)
"flexclust" %in% rownames(ap)
install.packages(flexclust)
install.packages("flexclust")
install.packages("BH")
install.packages("C:/Users/Romanos/Downloads/flexclust_1.3-4.zip", repos = NULL, type = "win.binary")
library(flexclust)
km.kcca = as.kcca(km, normTrain)
KMC
clusterTrain = predict(km.kcca)
KMC.kcca = as.kcca(KMC, normTrain)
clusterTrain = predict(KMC.kcca)
clusterTest = predict(KMC.kcca, newdata=normTest)
nrow(subset(normTest, clusterTest == 2))
stocksTrain1 = subset(normTrain, clusterTest == 1)
stocksTrain2 = subset(normTrain, clusterTest == 2)
stocksTrain3 = subset(normTrain, clusterTest == 3)
summary(stocksTrain1)
stocksTrain1 = subset(stocksTrain, clusterTest == 1)
stocksTrain2 = subset(stocksTrain, clusterTest == 2)
stocksTrain3 = subset(stocksTrain, clusterTest == 3)
summary(stocksTrain1)
summary(stocksTrain2)
summary(stocksTrain3)
stocksTest1 = subset(stocksTest, clusterTest == 1)
stocksTest2 = subset(stocksTest, clusterTest == 2)
stocksTest3 = subset(stocksTest, clusterTest == 3)
mean(stocksTrain1$PositiveDec)
mean(stocksTrain3$PositiveDec)
set.seed(144)
KMC = kmeans(normTrain, centers = 3)
clusters = KMC$cluster
cluster1 = subset(normTrain, clusters == 1)
cluster2 = subset(normTrain, clusters == 2)
cluster3 = subset(normTrain, clusters == 3)
KMC.kcca = as.kcca(KMC, normTrain)
clusterTrain = predict(KMC.kcca)
clusterTest = predict(KMC.kcca, newdata=normTest)
stocksTrain1 = subset(stocksTrain, clusterTest == 1)
stocksTrain2 = subset(stocksTrain, clusterTest == 2)
stocksTrain3 = subset(stocksTrain, clusterTest == 3)
summary(stocksTrain3)
summary(stocksTrain1)
StocksModel1 = glm(PositiveDec ~ ., data=stocksTrain1, family="binomial")
StocksModel2 = glm(PositiveDec ~ ., data=stocksTrain2, family="binomial")
StocksModel3 = glm(PositiveDec ~ ., data=stocksTrain3, family="binomial")
summary(StocksModel1)
StocksModel1$coefficients
StocksModel2$coefficients
StocksModel3$coefficients
preproc = preProcess(limitedTrain)
normTrain = predict(preproc, limitedTrain)
normTest = predict(preproc, limitedTest)
set.seed(144)
KMC = kmeans(normTrain, centers = 3)
clusters = KMC$cluster
cluster1 = subset(normTrain, clusters == 1)
cluster2 = subset(normTrain, clusters == 2)
cluster3 = subset(normTrain, clusters == 3)
library(flexclust)
KMC.kcca = as.kcca(KMC, normTrain)
clusterTrain = predict(KMC.kcca)
clusterTest = predict(KMC.kcca, newdata=normTest)
nrow(subset(normTest, clusterTest == 2))
stocksTrain1 = subset(stocksTrain, clusterTest == 1)
stocksTrain1 = subset(stocksTrain, clusterTrain == 1)
stocksTrain2 = subset(stocksTrain, clusterTrain == 2)
stocksTrain3 = subset(stocksTrain, clusterTrain == 3)
summary(stocksTrain1)
summary(stocksTrain3)
stocksTest1 = subset(stocksTest, clusterTest == 1)
stocksTest2 = subset(stocksTest, clusterTest == 2)
stocksTest3 = subset(stocksTest, clusterTest == 3)
StocksModel1 = glm(PositiveDec ~ ., data=stocksTrain1, family="binomial")
StocksModel2 = glm(PositiveDec ~ ., data=stocksTrain2, family="binomial")
StocksModel3 = glm(PositiveDec ~ ., data=stocksTrain3, family="binomial")
StocksModel1$coefficients
StocksModel2$coefficients
StocksModel3$coefficients
predictTest1 = predict(StocksModel1, newdata=stocksTest1, type = "response")
predictTest2 = predict(StocksModel2, newdata=stocksTest2, type = "response")
predictTest3 = predict(StocksModel3, newdata=stocksTest3, type = "response")
table(stocksTest1$PositiveDec, predictTest1 >= 0.5)
(774 + 30)/(774 + 30 + 23 + 471)
table(stocksTest2$PositiveDec, predictTest2 >= 0.5)
(388 + 757)/(388 + 757 + 626 + 309)
table(stocksTest3$PositiveDec, predictTest3 >= 0.5)
(49 + 13)/(49 + 13 + 13 + 21)
AllPredictions = c(predictTest1, predictTest2, predictTest3)
AllOutcomes = c(stocksTest1$PositiveDec, stocksTest2$PositiveDec, stocksTest3$PositiveDec)
table(AllOutcomes, AllPredictions >= 0.5)
(467 + 1544)/(467 + 1544 + 1110 + 353)
